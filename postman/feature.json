{
	"info": {
		"_postman_id": "ba6d37bc-a9db-42cc-b341-b447ebed676e",
		"name": "Feature Rating",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26367049"
	},
	"item": [
		{
			"name": "Add new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"user1\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"ivank.petrova@practicummail.ru\",\r\n    \"name\": \"Иванка Петрова\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has category create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"category1\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Концерты1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new event without moderation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has event create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test event 'state' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.state, '\"state\" must be \"PENDING\"').to.eql(\"PENDING\");\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"event1\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\": \"Сплав на байдарках похож на полет.\",\r\n    \"category\": 1,\r\n    \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n    \"eventDate\": \"2024-12-31 15:10:05\",\r\n    \"location\": {\r\n        \"lat\": 55.754167,\r\n        \"lon\": 37.62\r\n    },\r\n    \"paid\": true,\r\n    \"participantLimit\": 10,\r\n    \"requestModeration\": false,\r\n    \"title\": \"Сплав на байдарках\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{user1}}/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user1}}",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Publish event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Has event create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test event 'state' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql(\"PUBLISHED\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, [1000]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/{{event1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						"{{event1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add like from user without request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{user1}}/like?eventId={{event1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user1}}",
						"like"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"user2\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"andrey.romanov@practicummail.ru\",\r\n    \"name\": \"Андрей Романов\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has request create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{user2}}/requests?eventId={{event1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user2}}",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add like from user with request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{user2}}/like?eventId={{event1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user2}}",
						"like"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete like from user with request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{user2}}/like?eventId={{event1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user2}}",
						"like"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add dislike from user with request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{user2}}/dislike?eventId={{event1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user2}}",
						"dislike"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete dislike from user with request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{user2}}/dislike?eventId={{event1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user2}}",
						"dislike"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new event without moderation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has event create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test event 'state' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.state, '\"state\" must be \"PENDING\"').to.eql(\"PENDING\");\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"event2\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\": \"Сплав на байдарках похож на полет.\",\r\n    \"category\": 1,\r\n    \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n    \"eventDate\": \"2023-12-31 15:10:05\",\r\n    \"location\": {\r\n        \"lat\": 55.754167,\r\n        \"lon\": 37.62\r\n    },\r\n    \"paid\": true,\r\n    \"participantLimit\": 10,\r\n    \"requestModeration\": false,\r\n    \"title\": \"Сплав на байдарках\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{user1}}/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user1}}",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Publish event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Has event create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test event 'state' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql(\"PUBLISHED\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, [1000]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/{{event2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						"{{event2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add likes from user without request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{user2}}/likes?eventIds={{event1}},{{event2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user2}}",
						"likes"
					],
					"query": [
						{
							"key": "eventIds",
							"value": "{{event1}},{{event2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has request create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{user2}}/requests?eventId={{event2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user2}}",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add likes from user with request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{user2}}/likes?eventIds={{event1}},{{event2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user2}}",
						"likes"
					],
					"query": [
						{
							"key": "eventIds",
							"value": "{{event1}},{{event2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"user3\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"mikhail.zykin@practicummail.ru\",\r\n    \"name\": \"Михаил Зыкин\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has request create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{user3}}/requests?eventId={{event2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user3}}",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"user4\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"alexander.pushkin@practicummail.ru\",\r\n    \"name\": \"Александр Пушкин\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new event without moderation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has event create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test event 'state' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.state, '\"state\" must be \"PENDING\"').to.eql(\"PENDING\");\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"event3\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\": \"Сплав на байдарках похож на полет.\",\r\n    \"category\": 1,\r\n    \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n    \"eventDate\": \"2023-12-31 15:10:05\",\r\n    \"location\": {\r\n        \"lat\": 55.754167,\r\n        \"lon\": 37.62\r\n    },\r\n    \"paid\": true,\r\n    \"participantLimit\": 10,\r\n    \"requestModeration\": false,\r\n    \"title\": \"Сплав на байдарках\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{user4}}/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user4}}",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Publish event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Has event create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test event 'state' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql(\"PUBLISHED\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, [1000]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/{{event3}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						"{{event3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has request create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{user3}}/requests?eventId={{event3}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user3}}",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event3}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add like from user with request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{user3}}/like?eventId={{event3}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user3}}",
						"like"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event3}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get event rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test list event response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('events');\r",
							"    pm.expect(jsonData.events.length, 'List length must be 3').to.eql(3);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/rating/event",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rating",
						"event"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test list user response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('users');\r",
							"    pm.expect(jsonData.users.length, 'List length must be 2').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/rating/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rating",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete likes from user with request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{user2}}/likes?eventIds={{event1}},{{event2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user2}}",
						"likes"
					],
					"query": [
						{
							"key": "eventIds",
							"value": "{{event1}},{{event2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add dislikes from user with request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{user2}}/dislikes?eventIds={{event1}},{{event2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user2}}",
						"dislikes"
					],
					"query": [
						{
							"key": "eventIds",
							"value": "{{event1}},{{event2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get event rating with parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test list event response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('events');\r",
							"    pm.expect(jsonData.events.length, 'List length must be 3').to.eql(3);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/rating/event?top=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rating",
						"event"
					],
					"query": [
						{
							"key": "top",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user rating with parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test list user response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('users');\r",
							"    pm.expect(jsonData.users.length, 'List length must be 2').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/rating/user?top=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rating",
						"user"
					],
					"query": [
						{
							"key": "top",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete dislikes from user with request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{user2}}/dislikes?eventIds={{event1}},{{event2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{user2}}",
						"dislikes"
					],
					"query": [
						{
							"key": "eventIds",
							"value": "{{event1}},{{event2}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "user1",
			"value": "1",
			"type": "string"
		},
		{
			"key": "user2",
			"value": "1"
		},
		{
			"key": "user3",
			"value": "1",
			"type": "string"
		},
		{
			"key": "user4",
			"value": "1",
			"type": "string"
		},
		{
			"key": "category1",
			"value": "1",
			"type": "string"
		},
		{
			"key": "event1",
			"value": "1",
			"type": "string"
		},
		{
			"key": "event2",
			"value": "1",
			"type": "string"
		},
		{
			"key": "event3",
			"value": "1",
			"type": "string"
		}
	]
}